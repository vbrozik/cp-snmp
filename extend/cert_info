#!/bin/sh

# cert_info
# author: Václav Brožík
#
# Get information about a certificate stored in a file.
# Currently supports only PKCS#12 certificate files and information
# about the certificate expiration.
#
# Designed to be used on Check Point Gaia R80.40+ to check
# ICA and SIC certificates.

# Installation on Gaia
# --------------------
# 1. Copy the script to /usr/local/bin or other location (e.g. under /opt)
# 2. Add settings into /etc/snmp/userDefinedSettings.conf
#    extend cert_ica_expu /usr/local/bin/cert_info ica expiration unix
#    See other examples in userDefinedSettings_examples.conf.
# 3. Restart snmp agent:
#    clish -c 'set snmp agent off' && clish -c 'set snmp agent on'
# 4. Test:
#    snmptable localhost NET-SNMP-EXTEND-MIB::nsExtendOutput1Table
#    snmpget localhost 'NET-SNMP-EXTEND-MIB::nsExtendOutput1Line."cert_ica_expi"'

# Usage
# -----
# The program has 3 mandatory arguments:
# cert_info <cert_type> <information> <conversion>
# <cert_type>   - type of certificate to get information about
#               - ica - ICA root certificate (on management servers only)
#               - sic - machine's SIC certificate - on any managed machine
#                   TODO: support for VS SIC certificates
# <information> - information to retrieve
#               - expiration - expiration date-time
#               - exp2months, exp3months - whether certificate expires
#                   use the conversion "identity" (below) to get "OK" or "Expires"
# <conversion>  - conversion of the information (output format)
#               - unix - Unix epoch time (number of seconds since 1970-01-01)
#               - iso-8601-compact-date - date in format: YYYYMMDD
#               - identity - pass the information unmodified
#                   for expN* it passes OK or Expires
# When the program fails, it returns, status 1, text 'Failed' in the first line
# and details in the second line.

# openssl on Check Point Gaia:
openssl=cpopenssl

SEC_IN_MONTH=$((30 * 24 * 60 * 60))

errexit () {
    printf Fail\\n
    printf %s\\n "$*" >&2
    exit 1
}

if test $# != 3 ; then
    errexit 'Tool cert_info requires three arguments.'
fi

# --- certificate file locations:
case "$1" in
    ica)
        cert_file="$FWDIR/conf/InternalCA.p12"
        ;;
    sic)
        cert_file="$CPDIR/conf/sic_cert.p12"
        ;;
    *)
        errexit "Unknown certificate type, got: '$1'"
esac

# --- information extraction
sed_filter_checkend='s/^Certificate will expire/Expires/p;s/^Certificate will not expire/OK/p'
case "$2" in
    expiration)
        x509_opt="-noout -enddate"
        sed_filter='s/^notAfter=//p'
        ;;
    exp2months)
        x509_opt="-noout -checkend $((2 * SEC_IN_MONTH))"
        sed_filter="$sed_filter_checkend"
        ;;
    exp3months)
        x509_opt="-noout -checkend $((3 * SEC_IN_MONTH))"
        sed_filter="$sed_filter_checkend"
        ;;
    exp6months)
        x509_opt="-noout -checkend $((6 * SEC_IN_MONTH))"
        sed_filter="$sed_filter_checkend"
        ;;
    exp36months)
        x509_opt="-noout -checkend $((36 * SEC_IN_MONTH))"
        sed_filter="$sed_filter_checkend"
        ;;
    *)
        errexit "Unknown query type, got: '$2'"
esac

# --- output conversion
case "$3" in
    unix)
        convert () {
            date -d "$1" +%s
        }
        ;;
    iso-8601-compact-date)
        convert () {
            date -d "$1" +%Y%m%d
        }
        ;;
    identity)
        convert () {
            printf %s\\n "$1"
        }
        ;;
    *)
        errexit "Unknown conversion, got: '$3'"
esac

# Option for extended error checking. Not in current POSIX1.2017.
# Not in dash which is /bin/sh in Debian and derivatives (Ubuntu)!
# shellcheck disable=SC3040
# set -o pipefail 2>/dev/null
# Non-zero exit status of the pipe not tested because -checkend returns nonzero
# when certificate will fail.

# shellcheck disable=SC2086
output=$(
    "$openssl" pkcs12 -in "$cert_file" -nokeys -nomacver -passin pass: 2>/dev/null |
    "$openssl" x509 $x509_opt 2>/dev/null |
    sed -n "$sed_filter")

# --- check and write the result
test -z "$output" && errexit 'Query failed - empty output.'

output=$(convert "$output" 2>/dev/null) || errexit 'Conversion failed.'
test -z "$output" && errexit 'Conversion failed - empty output.'

printf %s\\n "$output"
